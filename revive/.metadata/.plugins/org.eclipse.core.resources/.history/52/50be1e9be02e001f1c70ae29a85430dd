package com.smhrd.member.controller;

import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.smhrd.member.model.MemberDAO;
import com.smhrd.member.model.MemberDTO;

public class MemberEditCon extends HttpServlet {
    private static final long serialVersionUID = 1L;
    

	protected void service(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		// 1. 한글 인코딩
		request.setCharacterEncoding("UTF-8");

		// 2. 데이터 가지고 오기
		//로그인정보는 어디에서 가져와야 하는지: session
		HttpSession session = request.getSession();// 세션 생성
		
		// 세션에서 회원 정보 가져오기
		MemberDTO member=(MemberDTO)session.getAttribute("loginMember");
		
		if (member == null) {//세션에 로그인 정보가 없으면
			Cookie[] cookies = request.getCookies();//쿠키를 가져와서
			if (cookies != null) {
				for (Cookie cookie : cookies) {
					if (cookie.getName().equals("savedId")) {
						String savedId = cookie.getValue();
						System.out.println("Saved Id from cookie: " + savedId);}
					}
				}
			}
		
		String saveId=member.getMem_id();//login.jsp 참고해서 id칸 자동으로 채우기 구현
		System.out.println("Saved Id from session: " + saveId);
		
		
		
	      
        // 사용자가 입력한 현재 비밀번호, 신규 비밀번호, 비밀번호 확인 가져오기
        String currentPassword = request.getParameter("currentPassword");
        String newPassword = request.getParameter("newPassword");
        String newPasswordConfirm = request.getParameter("newPasswordConfirm");
        
        // 변경할 이름, 휴대폰 번호, 이메일 가져오기
        String newName = request.getParameter("newName");
        String newPhone = request.getParameter("newPhone");
        String newEmail = request.getParameter("newEmail");
        
        // DAO를 통해 데이터베이스에서 사용자 정보 가져오기
        MemberDAO memberDAO = new MemberDAO();
        MemberDTO member1 = memberDAO.getMemberById(saveId);
        
        // 데이터베이스에 저장된 비밀번호
        String storedPassword = member1.getPassword(); // 예시: 실제 컬럼명에 맞게 수정할 것
        
        // 비밀번호 일치 여부 검사
        if (!currentPassword.equals(storedPassword)) {
            // 현재 비밀번호가 일치하지 않을 경우, 에러 처리 또는 메시지 출력
            request.setAttribute("error", "현재 비밀번호가 일치하지 않습니다.");
            request.getRequestDispatcher("modifyProfileForm.jsp").forward(request, response);
            return;
        }
        
        // 신규 비밀번호와 비밀번호 확인 일치 여부 검사
        if (!newPassword.equals(newPasswordConfirm)) {
            // 신규 비밀번호와 비밀번호 확인이 일치하지 않을 경우, 에러 처리 또는 메시지 출력
            request.setAttribute("error", "신규 비밀번호가 일치하지 않습니다.");
            request.getRequestDispatcher("modifyProfileForm.jsp").forward(request, response);
            return;
        }
        
        // 회원 정보 업데이트
        member1.setName(newName);
        member1.setPhone(newPhone);
        member1.setEmail(newEmail);
        member1.setPassword(newPassword); // 신규 비밀번호 설정
        
        // DAO를 통해 회원 정보 업데이트
        boolean updated = memberDAO.updateMember(member1);
        
        if (updated) {
            // 회원 정보 수정 성공 시
            request.setAttribute("message", "회원 정보가 성공적으로 수정되었습니다.");
            request.getRequestDispatcher("profile.jsp").forward(request, response);
        } else {
            // 회원 정보 수정 실패 시
            request.setAttribute("error", "회원 정보 수정에 실패했습니다.");
            request.getRequestDispatcher("modifyProfileForm.jsp").forward(request, response);
        }
    }
}